/**
   Copyright 2011 Mavens Consulting, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */

@isTest
public with sharing class {{name}} {
    public static Boolean FillAllFields = false;

    // Key : SobjectAPIName  For ex. Account
    // Value : Map<String, Schema.SObjectField>, field map (k:fieldname, v:Schema.Sobjectfield)
    public static Profile userProfile = [
        SELECT Id
        FROM Profile
        WHERE Name = 'System Administrator'
    ];

    private static final Map<String, Map<String, Schema.SObjectField>> FieldMapCache =
        new Map<String, Map<String, Schema.SObjectField>>();

    private static final Map<String, Schema.SObjectType> GlobalDescribe =
        Schema.getGlobalDescribe();

    private static final Map<String, SObject> SObjectCache =
        new Map<String, SObject>();

    // Default Country and State
    // When Country and State Picklists are enabled, cannot dynamically resolve which States are within a Country
    public static string DefaultCountry = 'United States';
    public static string DefaultCountryCode = 'US';
    public static string DefaultState = 'Pennsylvania';
    public static string DefaultStateCode = 'PA';

    // Key: sobject.field
    // Value: first picklist value
    private static final Map<String, String> DefaultPicklistValue =
        new Map<String, String>();

    // can't map by Schema.sObjectType, use object name String instead
    public static Map<String, Set<String>> ExcludedFields = new Map<String, Set<String>> {
        'All' => new Set<String> {
            'CreatedById',
            'CreatedDate',
            'LastModifiedById',
            'LastModifiedDate',
            'OwnerId'
        },
        'Account' => new Set<String> {
            'FirstName',
            'LastName'
        },
        'User' => new Set<String> {
            'CallCenterId',
            'ContactId',
            'DelegatedApproverId',
            'FederationIdentifier',
            'IsActive',
            'ManagerId',
            'UserRoleId'
        }
    };

    // include nillable fields
    public static Map<String, Set<String>> IncludedFields = new Map<String, Set<String>> {
        'ContentVersion' => new Set<String> {
            'ContentUrl'
        }
    };

    public static SObject createSObject(String objectType) {
        return createSObject(objectType, false);
    }

    public static List<SObject> createSObjectList(
        String objectType,
        Boolean cascade,
        Integer numberOfObjects
    ) {
        return createSObjectList(objectType, cascade, 0, numberOfObjects);
    }

    public static List<SObject> createSObjectList(
        String objectType,
        Boolean cascade,
        Integer initialCounter,
        Integer numberOfObjects
    ) {
        List<SObject> sos = new List<SObject>();
        for( Integer i = 0; i < numberOfObjects; i++ ) {
            SObjectCache.clear();
            Integer counter = i + initialCounter;
            sos.add(createSObject(objectType, cascade, counter));
        }
        return sos;
    }

    private static SObject newInstance(String objectType) {
        final Schema.sObjectType token = GlobalDescribe.get(objectType);
        if (token == null) {
            throw new IllegalArgumentException('Unsupported ObjectType ' + objectType);
        } else if (!token.getDescribe().isCreateable()) {
            System.debug(String.format(
                'Type "{0}" is not createable, setting to "null"',
                new List<String> {
                    objectType
                }
            ));
            return null;
        }
        return token.newSObject();
    }

    private static SObject getSObjectFromCache(String objectType, Boolean isRoot) {
        if (!SObjectCache.containsKey(objectType)) {
            final SObject obj = newInstance(objectType);
            SObjectCache.put(objectType, obj);
            return obj;
        }

        System.debug(String.format(
            'Retrieving cached instance of type {0}',
            new List<String> {
                objectType
            }
        ));

        final SObject obj = SObjectCache.get(objectType);
        if (obj != null && obj.Id == null && !isRoot) {
            System.debug(String.format(
                'Persisting cached object of type "{0}" since ' +
                'it\'s only in memory and doesn\'t have an ID yet',
                new List<String> {
                    objectType
                }
            ));
            insert obj;
            SObjectCache.put(objectType, obj);
        }

        return obj;
    }

    public static SObject createSObject(String objectType, Boolean cascade, Integer counter) {
        return createSObject(objectType, cascade, counter, true);
    }

    public static SObject createSObject(
        String objectType,
        Boolean cascade,
        Integer counter,
        Boolean isRoot
    ) {
        final SObject obj = getSObjectFromCache(objectType, isRoot);
        if (obj == null || obj.Id != null) {
            return obj;
        }

        for (Schema.SObjectField field : fieldMapFor(objectType).values()) {
            setFieldValue(obj, field, cascade, counter);
        }

        if (obj.Id == null && !isRoot) {
            System.debug('Inserting child node ' + obj);
            insert obj;
        }

        SObjectCache.put(objectType, obj);
        return obj;
    }

    public static SObject createSObject(String objectType, Boolean cascade) {
        return createSObject(objectType, cascade, 1);
    }

    /**
        Returns a field map for a given sobject.

        Note : this method is kept public for Test cases to share the same field map info, without requiring a field desribe.

        @param objectType sobject api name for ex. Account
        @returns FieldMap [Key:FieldName,Value:Schema.SObjectField]
    */
    public static  Map<String, Schema.SObjectField> fieldMapFor(String objectType) {
        Map<String, Schema.SObjectField> fieldMap = null;
        String normalizedObjectType = objectType.toLowerCase();

        if (FieldMapCache.containsKey(normalizedObjectType)) {
            fieldMap = FieldMapCache.get(normalizedObjectType);
        } else {
            fieldMap = GlobalDescribe.get(objectType).getDescribe().fields.getMap();
            // cache it for next use
            FieldMapCache.put(normalizedObjectType, fieldMap);
        }

        return fieldMap;
    }

    static String getDefaultPicklistValue(SObject obj, Schema.DescribeFieldResult fieldDescribe) {
        String key = obj.getSObjectType() + '.' + fieldDescribe.getName();

        if (!DefaultPicklistValue.containsKey(key)) {
            List<Schema.PicklistEntry> entries = fieldDescribe.getPicklistValues();
            String value = entries.size() > 0 ? entries[0].getValue() : null;
            DefaultPicklistValue.put(key, value);
        }

        return DefaultPicklistValue.get(key);
    }

    static Boolean isExcludedField(Schema.DescribeFieldResult fieldDescribe) {
        return ExcludedFields.get('All').contains(fieldDescribe.getName());
    }

    static Boolean isExcludedField(SObject obj, Schema.DescribeFieldResult fieldDescribe) {
        Set<String> fields = ExcludedFields.get(obj.getSObjectType().getDescribe().getName());
        return fields == null ? false : fields.contains(fieldDescribe.getName());
    }

    static Boolean isIncludedField(SObject obj, Schema.DescribeFieldResult fieldDescribe) {
        Set<String> fields = includedFields.get(obj.getSObjectType().getDescribe().getName());
        return fields == null ? false : fields.contains(fieldDescribe.getName());
    }

    static Boolean isPersonAccountField(Schema.DescribeFieldResult fieldDescribe) {
        Boolean isPersonAccountEnabled = fieldMapFor('Account').get('IsPersonAccount') != null;
        Set<string> skipPersonAccountFields = new Set<string>{ 'Salutation' };

        Boolean CustomPerson = fieldDescribe.isCustom() && fieldDescribe.getName().endsWith('pc');
        Boolean StandardPerson = !fieldDescribe.isCustom() && fieldDescribe.getName().startsWith('Person');

        return (
            CustomPerson ||
            StandardPerson ||
            (isPersonAccountEnabled && skipPersonAccountFields.contains(fieldDescribe.getName()))
        );
    }

    private static String newEmailAddress() {
        Long randomComponent = Math.roundToLong(Math.random() * 1000);
        String dateComponent = String.valueOf(Datetime.now().getTime());
        return String.format(
            'test{0}{1}@test.com',
            new List<String> {
                randomComponent.format(),
                dateComponent
            }
        );
    }

    static void setFieldValue(SObject obj, String fieldName) {
        Schema.SObjectField field = fieldMapFor(
            obj.getSObjectType().getDescribe().getName()
        ).get(fieldName);
        setFieldValue(obj, field, false);
    }

    static void setFieldValue(SObject obj, Schema.SObjectField field) {
        setFieldValue(obj, field, false);
    }

    static void setFieldValue(SObject obj, Schema.SObjectField field, Boolean cascade) {
        setFieldValue(obj, field, cascade, 0);
    }

    private static Boolean shouldIncludeField(
        Schema.DescribeFieldResult fieldDescribe,
        SObject obj,
        Boolean cascade
    ) {
        return (
            fieldDescribe.getName() == 'IsActive' ||
            (
                fieldDescribe.isCreateable() &&
                !fieldDescribe.isDefaultedOnCreate() &&
                (
                    isIncludedField(obj, fieldDescribe) ||
                    (
                        (
                            FillAllFields ||
                            !fieldDescribe.isNillable() ||
                            (
                                // Always fill references with cascade if they are not nillable
                                cascade &&
                                fieldDescribe.getType() == Schema.DisplayType.Reference
                            )
                        ) &&
                        !isExcludedField(fieldDescribe) &&
                        !isExcludedField(obj, fieldDescribe) &&
                        !isPersonAccountField(fieldDescribe)
                    )
                )
            )
        );
    }

    static void setFieldValue(
        SObject obj,
        Schema.SObjectField field,
        Boolean cascade,
        Integer counter
    ) {
        Schema.DescribeFieldResult fieldDescribe = field.getDescribe();
        if (shouldIncludeField(fieldDescribe, obj, cascade)) {
            if (fieldDescribe.getType() == Schema.DisplayType.Picklist) {
                // Picklist goes first, since we potential values are ready to be grabbed,
                // and we can't really use any other value anyways.
                obj.put(field, getDefaultPicklistValue(obj, fieldDescribe));
            } else if (fieldDescribe.getName().endsWith('Country')) {
                obj.put(field, DefaultCountry);
            } else if (fieldDescribe.getName().endsWith('State')) {
                obj.put(field, DefaultState);
            } else if (fieldDescribe.getName().endsWith('CountryCode')) {
                obj.put(field, DefaultCountryCode);
            } else if (fieldDescribe.getName().endsWith('StateCode')) {
                obj.put(field, DefaultStateCode);
            } else if (
                fieldDescribe.getType() == Schema.DisplayType.URL ||
                fieldDescribe.getName().endsWith('Url')
            ) {
                String value = String.format(
                    'http://test{0}.com',
                    new List<String> {
                        counter.format()
                    }
                );
                obj.put(field, value);
            } else if (fieldDescribe.getType() == Schema.DisplayType.base64) {
                Integer randomComponent = (Integer) (Math.random() * 1000);
                String value = String.format(
                    '{0}-{1}',
                    new List<String> {
                        counter.format(),
                        randomComponent.format()
                    }
                );
                obj.put(field, Blob.valueOf(value));
            } else if (fieldDescribe.getType() == Schema.DisplayType.Boolean) {
                obj.put(field, true);
            } else if (fieldDescribe.getType() == Schema.DisplayType.Combobox) {
                obj.put(field, counter.format());
            } else if (fieldDescribe.getType() == Schema.DisplayType.Currency) {
                obj.put(field, counter);
            } else if (fieldDescribe.getType() == Schema.DisplayType.Date) {
                obj.put(field, Date.today());
            } else if (fieldDescribe.getType() == Schema.DisplayType.DateTime) {
                obj.put(field, DateTime.now());
            } else if (fieldDescribe.getType() == Schema.DisplayType.Double) {
                obj.put(field, counter);
            } else if (
                fieldDescribe.getName() == 'Username' ||
                fieldDescribe.getType() == Schema.DisplayType.Email
            ) {
                obj.put(field, newEmailAddress());
            } else if (fieldDescribe.getType() == Schema.DisplayType.EncryptedString) {
                obj.put(field, 's');
            } else if (fieldDescribe.getType() == Schema.DisplayType.Id) {
                // Ignore, we don't specify ID's when creating objects.
            } else if (fieldDescribe.getType() == Schema.DisplayType.Integer) {
                Integer value = (Integer) (Math.random() * 30);
                obj.put(field, value);
            } else if (fieldDescribe.getType() == Schema.DisplayType.MultiPicklist) {
                obj.put(field, getDefaultPicklistValue(obj, fieldDescribe));
            } else if (fieldDescribe.getType() == Schema.DisplayType.Percent) {
                obj.put(field, counter);
            } else if (fieldDescribe.getType() == Schema.DisplayType.Phone) {
                obj.put(field, '123-456-7890');
            } else if (
                fieldDescribe.getName() == 'CommunityNickname' &&
                fieldDescribe.getType() == Schema.DisplayType.String
            ) {
                Long randomComponent = Math.roundToLong(Math.random() * 1000);
                String value = String.format(
                    'test{0}',
                    new List<String> {
                        randomComponent.format()
                    }
                );
                obj.put(field, value);
            } else if (fieldDescribe.getType() == Schema.DisplayType.String) {
                Long randomComponent = Math.roundToLong(Math.random() * 1000);
                Integer maxLength = fieldDescribe.getLength();
                String preliminaryValue = String.format(
                    'a{0}{1}',
                    new List<String> {
                        counter.format(),
                        randomComponent.format()
                    }
                );
                Integer valueLength = Math.min(maxLength, preliminaryValue.length());
                String value = preliminaryValue.substring(0, valueLength);
                obj.put(field, value);
            } else if (fieldDescribe.getType() == Schema.DisplayType.Reference) {
                String referenceObjectType = fieldDescribe.getReferenceTo()[0].getDescribe().getName();

                if (referenceObjectType == 'RecordType') {
                    setRecordType(obj);
                } else if (referenceObjectType == 'Profile') {
                    obj.put(field, userProfile.Id);
                } else if (referenceObjectType == 'Username') {
                    obj.put(field, newEmailAddress());
                } else if (
                    cascade &&
                    referenceObjectType != obj.getSObjectType().getDescribe().getName() &&
                    referenceObjectType != 'BusinessHours'
                ) {
                    System.debug(
                        String.format(
                            'Creating reference to {0} for field {1}.{2}',
                            new List<String> {
                                referenceObjectType,
                                obj.getSObjectType().getDescribe().getName(),
                                fieldDescribe.getName()
                            }
                        )
                    );
                    SObject reference = createSObject(referenceObjectType, cascade, counter + 1, false);
                    if (reference == null) {
                        System.debug('Skipping instance of type ' + referenceObjectType);
                        obj.put(field, null);
                        return;
                    }

                    obj.put(field, reference.Id);
                }
            } else if (fieldDescribe.getType() == Schema.DisplayType.TextArea) {
                obj.put(field, counter.format());
            } else if (fieldDescribe.getType() == Schema.DisplayType.Time) {
                obj.put(field, Time.newInstance(0, 0, 0, 0));
            } else {
                System.debug('Unhandled field type ' + fieldDescribe.getType());
            }
        }
    }

    static void setRecordType(SObject obj) {
        List<Schema.RecordTypeInfo> recordTypes = obj.getSObjectType().getDescribe().getRecordTypeInfos();
        if (recordTypes.size() > 1) {   // All objects have default Master type
            for (Schema.RecordTypeInfo recordType : recordTypes) {
                if (recordType.isAvailable() && recordType.isDefaultRecordTypeMapping()) {
                    obj.put('RecordTypeId', recordType.getRecordTypeId());
                }
            }
        }
    }
}
